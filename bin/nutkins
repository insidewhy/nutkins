#!/usr/bin/env ruby

require 'bundler/setup'
require 'nutkins'
require 'moister'
require 'ostruct'

module Nutkins::Command
  def self.run args
    config = nil
    command = nil

    Moister::SubcommandOptionParser.new do |op|
      op.banner = 'usage: nutkins [global options] command [command options]'

      op.for_all do |op|
        op.on_tail '-h', '--help', 'show this help message' do
          puts op
          exit
        end
      end

      op.on '-p', '--project dir', 'override path to project', 'project_dir'

      op.subcommand 'build,b *names', 'build docker image from dockerfile'

      op.subcommand 'create,c *names', 'create container from image' do |subop|
        subop.on '-p', '--preserve', 'preserve existing container', 'preserve'
      end

      op.subcommand 'delete,d *names', 'delete container corresponding to image'
      op.subcommand 'delete-all', 'delete containers corresponding to all images'

      op.subcommand 'run,r name', 'run created container' do |subop|
        subop.on '-r', '--reuse', 'reuse previously created container', 'reuse'
      end

      op.subcommand 'shell,s name', 'run created container with shell hiding usual container output'
      op.subcommand 'exec,e name *cmd', 'execute a command in a running container'
      op.subcommand 'rebuild-secrets,S [*paths]', 'rebuild secrets files'

      parsed_cfg = op.parse(args).to_h

      config = OpenStruct.new parsed_cfg[:config]
      command = parsed_cfg[:command]
    end

    unless command
      puts 'please supply a command, see --help'
      exit 1
    end

    nutkins = Nutkins::CloudManager.new(project_dir: config.project_dir)
    cmd_config = OpenStruct.new config[command]

    case command
    when 'build'
      cmd_config.names.each &nutkins.method(:build)
    when 'create'
      cmd_config.names.each do |name|
        nutkins.create name, preserve: cmd_config.preserve
      end
    when 'delete'
      cmd_config.names.each &nutkins.method(:delete)
    when 'delete-all'
      nutkins.delete_all
    when 'rebuild-secrets'
      nutkins.rebuild_secrets cmd_config.paths
    when 'run'
      nutkins.run cmd_config.name, reuse: cmd_config.reuse
    when 'shell'
      nutkins.shell cmd_config.name
    when 'exec'
      nutkins.exec cmd_config.name, cmd_config.cmd
    end
  rescue RuntimeError => e
    puts e.to_s
  end
end

Nutkins::Command::run ARGV
